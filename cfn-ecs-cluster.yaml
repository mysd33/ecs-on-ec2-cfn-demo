AWSTemplateFormatVersion: 2010-09-09
Description: ECS Cluster Template for CloudFormation Demo. 

#Metadata:

Parameters:
  StackPrefix:
    Description: Stack Resource Name Prefix
    Type: String
    Default: Demo
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  EnvironmentType:
    Description: The environment type
    Type: String
    AllowedValues: ["Dev", "Staging", "Production"]
    Default: Production
    ConstraintDescription: must be a prod or test
Mappings:
  FrontendClusterDefinitionMap:
    Production:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Staging:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Dev:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
  BackendClusterDefinitionMap:
    Production:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Staging:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Dev:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
  BatchClusterDefinitionMap:
    Production:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Staging:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
    Dev:
      "InstanceType": "r4.large"
      "DesiredCapacity": 1
      "EC2InstanceMaxSizeOfECS": 3
      "KeyPairName": "myKeyPair"
#Conditions:

Resources:
  #ECS Cluster for Frontend
  FrontendECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${StackPrefix}-Frontend-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Frontend-Cluster
  #AutoScalingGroup for Frontend
  FrontendECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
#        - Fn::ImportValue: !Sub ${StackPrefix}-PublicSubnetOneId
#        - Fn::ImportValue: !Sub ${StackPrefix}-PublicSubnetTwoId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId                
      LaunchConfigurationName: !Ref FrontendECSLaunchConfiguration  
      MinSize: '0'
      MaxSize: !FindInMap [FrontendClusterDefinitionMap, !Ref EnvironmentType, EC2InstanceMaxSizeOfECS]
      DesiredCapacity: !FindInMap [FrontendClusterDefinitionMap, !Ref EnvironmentType, DesiredCapacity]
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Frontend-ASG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true          

  #ECS AutoScaling LaunchConfiguration for Frontend
  FrontendECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !FindInMap [FrontendClusterDefinitionMap, !Ref EnvironmentType, InstanceType]      
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${StackPrefix}-ECSIamInstanceProfile-ID
      KeyName: !FindInMap [FrontendClusterDefinitionMap, !Ref EnvironmentType, KeyPairName]
      SecurityGroups:      
        - Fn::ImportValue: !Sub ${StackPrefix}-PublicECSSecurityGroup-ID
#      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${FrontendECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource FrontendECSAutoScalingGroup --region ${AWS::Region}          
                    
  #ECS Cluster for Backend
  BackendECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${StackPrefix}-Backend-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Backend-Cluster
  #AutoScalingGroup for Backend    
  BackendECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId      
      LaunchConfigurationName: !Ref BackendECSLaunchConfiguration  
      MinSize: '0'
      MaxSize: !FindInMap [BackendClusterDefinitionMap, !Ref EnvironmentType, EC2InstanceMaxSizeOfECS]
      DesiredCapacity: !FindInMap [BackendClusterDefinitionMap, !Ref EnvironmentType, DesiredCapacity]
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Backend-ASG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true    
  #ECS AutoScaling LaunchConfiguration for Backend
  BackendECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !FindInMap [BackendClusterDefinitionMap, !Ref EnvironmentType, InstanceType]
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${StackPrefix}-ECSIamInstanceProfile-ID
      KeyName: !FindInMap [BackendClusterDefinitionMap, !Ref EnvironmentType, KeyPairName]
      SecurityGroups:      
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateECSSecurityGroup-ID
#      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${BackendECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BackendECSAutoScalingGroup --region ${AWS::Region}          

  #ECS Cluster for Batch
  BatchECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${StackPrefix}-Batch-Cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Batch-Cluster
  #AutoScalingGroup for Batch
  BatchECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetOneId
        - Fn::ImportValue: !Sub ${StackPrefix}-PrivateSubnetTwoId        
      LaunchConfigurationName: !Ref BatchECSLaunchConfiguration  
      MinSize: '0'
      MaxSize: !FindInMap [BatchClusterDefinitionMap, !Ref EnvironmentType, EC2InstanceMaxSizeOfECS]
      DesiredCapacity: !FindInMap [BatchClusterDefinitionMap, !Ref EnvironmentType, DesiredCapacity]
      Tags:
        - Key: Name
          Value: !Sub ${StackPrefix}-Batch-ASG
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true          

  #ECS AutoScaling LaunchConfiguration for Batch
  BatchECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !FindInMap [BatchClusterDefinitionMap, !Ref EnvironmentType, InstanceType]      
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${StackPrefix}-ECSIamInstanceProfile-ID
      KeyName: !FindInMap [BatchClusterDefinitionMap, !Ref EnvironmentType, KeyPairName]
      SecurityGroups:      
        - Fn::ImportValue: !Sub ${StackPrefix}-BatchECSSecurityGroup-ID 
#      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${BatchECSCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BatchECSAutoScalingGroup --region ${AWS::Region}          
    

Outputs:
  FrontendECSCluster:
    Description: Frontend ECS Cluster ID
    Value: !Ref FrontendECSCluster
    Export:
      Name: !Sub ${StackPrefix}-Frontend-ECSCluster
  FrontendECSClusterName:
    Description: Frontend ECS Cluster Name
    Value: !Sub ${StackPrefix}-Frontend-Cluster
    Export:
      Name: !Sub ${StackPrefix}-Frontend-ECSCluster-Name
  BackendECSCluster:
    Description: Backend ECS Cluster ID
    Value: !Ref BackendECSCluster
    Export:
      Name: !Sub ${StackPrefix}-Backend-ECSCluster
  BackendECSClusterName:
    Description: Backend ECS Cluster Name
    Value: !Sub ${StackPrefix}-Backend-Cluster
    Export:
      Name: !Sub ${StackPrefix}-Backend-ECSCluster-Name
  BatchECSCluster:
    Description: Batch ECS Cluster ID
    Value: !Ref BatchECSCluster
    Export:
      Name: !Sub ${StackPrefix}-Batch-ECSCluster
  BatchECSClusterName:
    Description: Batch ECS Cluster Name
    Value: !Sub ${StackPrefix}-Batch-Cluster
    Export:
      Name: !Sub ${StackPrefix}-Batch-ECSCluster-Name      
  BatchECSClusterArn:
    Description: Batch ECS Cluster Arn
    Value: !GetAtt BatchECSCluster.Arn
    Export:
      Name: !Sub ${StackPrefix}-Batch-ECSCluster-Arn